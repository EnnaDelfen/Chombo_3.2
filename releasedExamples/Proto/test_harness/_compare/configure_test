#!/usr/bin/python
from argparse import *
import os
import glob
import platform
from datetime import date

today = date.today()

print("Today's date:", today)

parser = ArgumentParser()

parser.add_argument('--input_template_dir', type=str, help='Directory of input file templates [../_input_templates].' ,default="../_input_templates")
parser.add_argument('--batch', type=str, help='batch file template'   ,default="../_batch_templates/serial.batch")
parser.add_argument('--num_proc', type=int, help='number of processors for each run'   ,default='1')
parser.add_argument('--prefix', type=str, help='name of test["prch_compare"]',default="prch_compare")

args = parser.parse_args()
print(args)
homestr = os.getcwd();
print ("homedir = " + homestr)
neartop_directory = homestr + "/_" +args.prefix
strtoday =str(today.month) + "_" + str(today.day) + "_" + str(today.year)
top_directory = neartop_directory + "_" + strtoday
print ("top_directory = " + top_directory)
if not os.path.exists(top_directory):
    printstr = "making directory " + top_directory
    print (printstr)
    os.mkdir(top_directory)

batch_template = homestr + "/" + args.batch
configure_log_name = top_directory + "/configure_test.log"
run_all_file_name = top_directory + "/run_all.sh"
f_run_all       = open( run_all_file_name,'w')
f_configure_log = open(configure_log_name,'w')
f_run_all.write('#/usr/bin/csh\n')

i_min_case = 0
i_max_case = 3

batch_root = "batch_4586.sh"

# loop through cases to run
#should be min case
#  set to max_case to make a short test
i_case = i_min_case
while i_case <= i_max_case:
    i_dim = 2
    # loop through dimensions
    #should be <=
    #  set to < for short test
    while i_dim <= 3:
        #loop through opt
        #should be 0
        #  set to 1 for short test
        i_opt = 1
        while i_opt <= 1:

            #I hesitate to use the char '=' in directory names
            #This also allows the directory name to be less shouty
            opt_status = "_opt_false"
            opt_gmake  = " OPT=FALSE "
            deb_status = "_debug_true"
            deb_gmake  = " DEBUG=TRUE "
            dim_status = "dim_"  + str(i_dim)
            case_status = "case_"  + str(i_case)
            dim_gmake  = " DIM=" + str(i_dim) + " "
            
            if(i_opt == 1):
                opt_status = "_opt_high"
                opt_gmake  = " OPT=HIGH "
                deb_status = "_debug_false"
                deb_gmake  = " DEBUG=FALSE "

            str_compile = deb_gmake + dim_gmake + opt_gmake
            str_config = case_status + dim_status + opt_status +  deb_status 
            run_case_file_name = top_directory + "/run_" + str_config + ".sh"
            f_run_case = open(run_case_file_name,'w')
            f_run_case.write('#/usr/bin/csh\n')
            printstr = "configuration string = " + str_config
            print (printstr)
            f_configure_log.write(printstr + "\n")
            config_directory = top_directory + "/" + str_config
            printstr =  "configuration directory = " + config_directory
            print(printstr)
            f_configure_log.write(printstr + "\n")
            if not os.path.exists(config_directory):
                printstr = "making directory " + config_directory
                print (printstr)
                f_configure_log.write(printstr + "\n")
                os.mkdir(config_directory)

            #should be 0
            #set to 3 for a short test
            i_opera = 0
            #set to <= if you want to run resistivity
            while i_opera < 3:
                #(inner loop)
                op_str = "4586"
                if(i_opera == 0):
                    op_str = "conductivity"
                if(i_opera == 1):
                    op_str = "helmholtz"
                if(i_opera == 2):
                    op_str = "viscous_tensor"
                if(i_opera == 3):
                    op_str = "resistivity"

                old_directory = config_directory + "/_old_" + op_str
                amr_directory = config_directory +  "/amr_" + op_str
                printstr = "old_directory = " + old_directory
                print (printstr)
                f_configure_log.write(printstr + "\n")
                printstr = "amr directory =  " + amr_directory
                print (printstr)
                f_configure_log.write(printstr + "\n")
                if not os.path.exists(old_directory):
                    os.mkdir(old_directory)
                if not os.path.exists(amr_directory):
                    os.mkdir(amr_directory)
                # create executables and copy them over
                # copy the right copy_n.inputs over
                # make a batch file 
                exec_directory_old = homestr + "/../../_old_" + op_str
                printstr = "exec_directory_old = " + exec_directory_old
                f_configure_log.write(printstr + "\n")
                print(printstr)
                exec_directory_amr = homestr + "/../../amr_" + op_str
                input_name = "case_" + str(i_case) + ".inputs"
                printstr = "exec_directory_amr = " + exec_directory_amr + ", input_name = " + input_name
                print(printstr)
                f_configure_log.write(printstr + "\n")
                command_old = "cd " + exec_directory_old + "; make main " + str_compile + "; mv main.exe " + old_directory + "; cp _inputs/" + input_name + " " + old_directory
                command_amr = "cd " + exec_directory_amr + "; make main " + str_compile + "; mv main.exe " + amr_directory + "; cp _inputs/" + input_name + " " + amr_directory
                printstr_old = "command_old = " + command_old
                printstr_amr = "command_amr = " + command_amr
                print(printstr_old)
                print(printstr_amr)
                f_configure_log.write(printstr_old + "\n")
                f_configure_log.write(printstr_amr + "\n")

                os.system(command_old)
                os.system(command_amr)
                f_batchtemplate = open(batch_template,'r')
                batch_file_old = old_directory + "/" +  batch_root
                batch_file_amr = amr_directory + "/" +  batch_root
                printstr_old = "batch_file_old = " + batch_file_old
                printstr_amr = "batch_file_amr = " + batch_file_amr
                print(printstr_old)
                print(printstr_amr)
                f_configure_log.write(printstr_old + "\n")
                f_configure_log.write(printstr_amr + "\n")
                #exit()
                f_batch_old = open(batch_file_old, 'w')
                f_batch_amr = open(batch_file_amr, 'w')
                for batchster in f_batchtemplate:
                    t1str = batchster;
                    t2str = t1str.replace("NUM_PROCS", str("1"))
                    t3str = t2str.replace("EXECUTABLE_FILE", "main.exe")
                    t4str = t3str.replace("INPUT_FILE", input_name)
                    f_batch_old.write(t4str)
                    f_batch_amr.write(t4str)
                f_batch_old.close()
                f_batch_amr.close()
                f_batchtemplate.close()

                batch_comm_old = "\n pushd " +  old_directory + "; source " + batch_root + "; popd \n;"
                batch_comm_amr = "\n pushd " +  amr_directory + "; source " + batch_root + "; popd \n;"
                f_run_all.write(batch_comm_amr);
                f_run_all.write(batch_comm_old);
                f_run_case.write(batch_comm_amr);
                f_run_case.write(batch_comm_old);


                i_opera = i_opera + 1
                # end loop over operators
                    
            f_run_case.close()
            i_opt = i_opt + 1
            # end loop over values of i_opt

        i_dim = i_dim + 1
        # end loop over values of i_dim
            
    i_case = i_case + 1
    # end loop over values of i_case

printstr =     "end of loop"
print(printstr)
f_configure_log.write(printstr + "\n")
printstr =     "closing run all"
print(printstr)
f_configure_log.write(printstr + "\n")
f_run_all.close()
printstr =     "closing this log and leaving"
print(printstr)
f_configure_log.write(printstr + "\n")

