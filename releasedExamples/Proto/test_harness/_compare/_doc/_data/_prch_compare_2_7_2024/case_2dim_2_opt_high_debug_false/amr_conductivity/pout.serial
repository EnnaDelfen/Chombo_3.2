Running amr_conductivity for DIM= 2
ilev = 0, grids = 
(( 0, 0) ( 15, 15) ( 0, 0))[0] # (( 0, 16) ( 15, 31) ( 0, 0))[0] # (( 16, 0) ( 31, 15) ( 0, 0))[0] # (( 16, 16) ( 31, 31) ( 0, 0))[0]

ilev = 1, grids = 
(( 0, 0) ( 7, 7) ( 0, 0))[0] # 
ilev = 2, grids = 
(( 0, 0) ( 7, 7) ( 0, 0))[0] # 
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
      32: ( 1, 0)
     -32: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 1, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
      32: ( 0, 1)
     -32: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0),( 15, 15)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
      64: ( 1, 0)
     -64: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 1, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
      64: ( 0, 1)
     -64: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0),( 7, 7)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
solveForPhi: testFluxRegister passed
AMRMultiGrid::solveNoInitResid: initial residual norm = 202033
    AMRMultiGrid:: iteration = 0, residual norm = 2.020330e+05
    AMRMultiGrid:: iteration = 1, residual norm = 9.570205e+04, rate = 2.111062e+00
    AMRMultiGrid:: iteration = 2, residual norm = 3.962146e+04, rate = 2.415410e+00
    AMRMultiGrid:: iteration = 3, residual norm = 1.635145e+04, rate = 2.423116e+00
    AMRMultiGrid:: iteration = 4, residual norm = 6.629119e+03, rate = 2.466609e+00
    AMRMultiGrid:: iteration = 5, residual norm = 2.660154e+03, rate = 2.492006e+00
    AMRMultiGrid:: iteration = 6, residual norm = 1.058837e+03, rate = 2.512335e+00
    AMRMultiGrid:: iteration = 7, residual norm = 4.190281e+02, rate = 2.526888e+00
    AMRMultiGrid:: iteration = 8, residual norm = 1.650982e+02, rate = 2.538054e+00
    AMRMultiGrid:: iteration = 9, residual norm = 6.483464e+01, rate = 2.546451e+00
    AMRMultiGrid:: iteration = 10, residual norm = 2.539626e+01, rate = 2.552921e+00
    AMRMultiGrid:: iteration = 11, residual norm = 9.928551e+00, rate = 2.557902e+00
    AMRMultiGrid:: iteration = 12, residual norm = 3.875651e+00, rate = 2.561776e+00
    AMRMultiGrid:: iteration = 13, residual norm = 1.511093e+00, rate = 2.564799e+00
    AMRMultiGrid:: iteration = 14, residual norm = 5.886224e-01, rate = 2.567170e+00
    AMRMultiGrid:: iteration = 15, residual norm = 2.291220e-01, rate = 2.569034e+00
    AMRMultiGrid:: iteration = 16, residual norm = 8.913500e-02, rate = 2.570506e+00
    AMRMultiGrid:: iteration = 17, residual norm = 3.466037e-02, rate = 2.571669e+00
    AMRMultiGrid:: iteration = 18, residual norm = 1.347294e-02, rate = 2.572591e+00
    AMRMultiGrid:: iteration = 19, residual norm = 5.235622e-03, rate = 2.573322e+00
    AMRMultiGrid:: iteration = 20, residual norm = 2.034117e-03, rate = 2.573903e+00
    AMRMultiGrid:: iteration = 21, residual norm = 7.901432e-04, rate = 2.574365e+00
    AMRMultiGrid:: iteration = 22, residual norm = 3.068835e-04, rate = 2.574733e+00
    AMRMultiGrid:: iteration = 23, residual norm = 1.191769e-04, rate = 2.575026e+00
    AMRMultiGrid:: iteration = 24, residual norm = 4.627761e-05, rate = 2.575260e+00
    AMRMultiGrid:: iteration = 25, residual norm = 1.796878e-05, rate = 2.575446e+00
    AMRMultiGrid:: iteration = 26, residual norm = 6.976555e-06, rate = 2.575594e+00
    AMRMultiGrid:: iteration = 27, residual norm = 2.708592e-06, rate = 2.575713e+00
    AMRMultiGrid:: iteration = 28, residual norm = 1.051551e-06, rate = 2.575807e+00
    AMRMultiGrid:: iteration = 29, residual norm = 4.082295e-07, rate = 2.575882e+00
    AMRMultiGrid:: iteration = 30, residual norm = 1.584777e-07, rate = 2.575944e+00
    AMRMultiGrid:: iteration = 30, residual norm = 1.584777e-07
    AMRMultiGrid::solveNoInitResid: final residual norm = 1.584777e-07 after 30 iterations.
WriteAMRHierarchy:  about to hopen handle for file phi.hdf5
WriteAMRHierarchy:  finished opening file phi.hdf5
peak memory usage: 116729 bytes (0 Mb)
