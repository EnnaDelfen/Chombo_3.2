Running amr_conductivity for DIM= 2
ilev = 0, grids = 
(( 0, 0) ( 31, 31) ( 0, 0))[0] # (( 0, 32) ( 31, 63) ( 0, 0))[0] # (( 32, 0) ( 63, 31) ( 0, 0))[0] # (( 32, 32) ( 63, 63) ( 0, 0))[0]

ilev = 1, grids = 
(( 0, 0) ( 7, 7) ( 0, 0))[0] # 
ilev = 2, grids = 
(( 0, 0) ( 7, 7) ( 0, 0))[0] # 
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
      64: ( 1, 0)
     -64: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 1, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
      64: ( 0, 1)
     -64: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0),( 31, 31)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
     128: ( 1, 0)
    -128: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 1, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
     128: ( 0, 1)
    -128: ( 0, 0)
}
srcRefratio:	( 1, 1)
destRefratio:	( 1, 1)
destShift:	( 0, 0)
span:		[( 0, 0),( 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0),( 7, 7)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
solveForPhi: testFluxRegister passed
AMRMultiGrid::solveNoInitResid: initial residual norm = 807908
    AMRMultiGrid:: iteration = 0, residual norm = 8.079078e+05
    AMRMultiGrid:: iteration = 1, residual norm = 3.825118e+05, rate = 2.112112e+00
    AMRMultiGrid:: iteration = 2, residual norm = 1.583846e+05, rate = 2.415082e+00
    AMRMultiGrid:: iteration = 3, residual norm = 6.536938e+04, rate = 2.422917e+00
    AMRMultiGrid:: iteration = 4, residual norm = 2.650520e+04, rate = 2.466285e+00
    AMRMultiGrid:: iteration = 5, residual norm = 1.063762e+04, rate = 2.491648e+00
    AMRMultiGrid:: iteration = 6, residual norm = 4.234817e+03, rate = 2.511943e+00
    AMRMultiGrid:: iteration = 7, residual norm = 1.676179e+03, rate = 2.526471e+00
    AMRMultiGrid:: iteration = 8, residual norm = 6.605319e+02, rate = 2.537620e+00
    AMRMultiGrid:: iteration = 9, residual norm = 2.594388e+02, rate = 2.546003e+00
    AMRMultiGrid:: iteration = 10, residual norm = 1.016425e+02, rate = 2.552464e+00
    AMRMultiGrid:: iteration = 11, residual norm = 3.974389e+01, rate = 2.557437e+00
    AMRMultiGrid:: iteration = 12, residual norm = 1.551704e+01, rate = 2.561306e+00
    AMRMultiGrid:: iteration = 13, residual norm = 6.051124e+00, rate = 2.564324e+00
    AMRMultiGrid:: iteration = 14, residual norm = 2.357558e+00, rate = 2.566691e+00
    AMRMultiGrid:: iteration = 15, residual norm = 9.178546e-01, rate = 2.568553e+00
    AMRMultiGrid:: iteration = 16, residual norm = 3.571388e-01, rate = 2.570022e+00
    AMRMultiGrid:: iteration = 17, residual norm = 1.389005e-01, rate = 2.571184e+00
    AMRMultiGrid:: iteration = 18, residual norm = 5.400266e-02, rate = 2.572105e+00
    AMRMultiGrid:: iteration = 19, residual norm = 2.098955e-02, rate = 2.572835e+00
    AMRMultiGrid:: iteration = 20, residual norm = 8.156302e-03, rate = 2.573416e+00
    AMRMultiGrid:: iteration = 21, residual norm = 3.168878e-03, rate = 2.573877e+00
    AMRMultiGrid:: iteration = 22, residual norm = 1.230993e-03, rate = 2.574244e+00
    AMRMultiGrid:: iteration = 23, residual norm = 4.781416e-04, rate = 2.574537e+00
    AMRMultiGrid:: iteration = 24, residual norm = 1.857026e-04, rate = 2.574770e+00
    AMRMultiGrid:: iteration = 25, residual norm = 7.211875e-05, rate = 2.574956e+00
    AMRMultiGrid:: iteration = 26, residual norm = 2.800615e-05, rate = 2.575104e+00
    AMRMultiGrid:: iteration = 27, residual norm = 1.087523e-05, rate = 2.575223e+00
    AMRMultiGrid:: iteration = 28, residual norm = 4.222870e-06, rate = 2.575318e+00
    AMRMultiGrid:: iteration = 29, residual norm = 1.639700e-06, rate = 2.575393e+00
    AMRMultiGrid:: iteration = 30, residual norm = 6.366663e-07, rate = 2.575446e+00
    AMRMultiGrid:: iteration = 30, residual norm = 6.366663e-07
    AMRMultiGrid::solveNoInitResid: final residual norm = 6.366663e-07
WriteAMRHierarchy:  about to hopen handle for file phi.hdf5
WriteAMRHierarchy:  finished opening file phi.hdf5
peak memory usage: 257053 bytes (0 Mb)
