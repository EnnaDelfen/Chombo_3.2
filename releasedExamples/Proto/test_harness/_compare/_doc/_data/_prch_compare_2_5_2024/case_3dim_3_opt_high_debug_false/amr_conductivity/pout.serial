Running amr_conductivity for DIM= 3
ilev = 0, grids = 
(( 0, 0, 0) ( 31, 31, 31) ( 0, 0, 0))[0] # (( 0, 0, 32) ( 31, 31, 63) ( 0, 0, 0))[0] # (( 0, 32, 0) ( 31, 63, 31) ( 0, 0, 0))[0] # (( 0, 32, 32) ( 31, 63, 63) ( 0, 0, 0))[0]
(( 32, 0, 0) ( 63, 31, 31) ( 0, 0, 0))[0] # (( 32, 0, 32) ( 63, 31, 63) ( 0, 0, 0))[0] # (( 32, 32, 0) ( 63, 63, 31) ( 0, 0, 0))[0] # (( 32, 32, 32) ( 63, 63, 63) ( 0, 0, 0))[0]

ilev = 1, grids = 
(( 0, 0, 0) ( 7, 7, 7) ( 0, 0, 0))[0] # 
ilev = 2, grids = 
(( 0, 0, 0) ( 7, 7, 7) ( 0, 0, 0))[0] # 
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 m_zflux_coar->max() = 4.586 m_zflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 a_zflux_fine->max() = 4.586 a_zflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
 m_zflux_cofi->max() = 4.586 m_zflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
      64: ( 1, 0, 0)
     -64: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 1, 0, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
      64: ( 0, 1, 0)
     -64: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 0, 1, 0)]

reflux: div_stencils[2] = 
Coeficients and Shifts: { 
      64: ( 0, 0, 1)
     -64: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 0, 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
 max_z = 4.586, min_z = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
 max_z = 4.586, min_z = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 buff_z.max() = 4.586, buff_z.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 flux_z.max() = 4.586, flux_z.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
 buff_z.max() = 2.22507e-308, buff_z.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0, 0),( 31, 31, 31)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 div_incr_z.max() = 2.22507e-308 div_incr_z.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
 after setCoarFlux: 
 m_xflux_coar->max() = 4.586 m_xflux_coar->min() = 4.586
 m_yflux_coar->max() = 4.586 m_yflux_coar->min() = 4.586
 m_zflux_coar->max() = 4.586 m_zflux_coar->min() = 4.586
 going into setFineFlux: 
 a_xflux_fine->max() = 4.586 a_xflux_fine->min() = 4.586
 a_yflux_fine->max() = 4.586 a_yflux_fine->min() = 4.586
 a_zflux_fine->max() = 4.586 a_zflux_fine->min() = 4.586
 after setFineFlux: 
 m_xflux_cofi->max() = 4.586 m_xflux_cofi->min() = 4.586
 m_yflux_cofi->max() = 4.586 m_yflux_cofi->min() = 4.586
 m_zflux_cofi->max() = 4.586 m_zflux_cofi->min() = 4.586
reflux: div_stencils[0] = 
Coeficients and Shifts: { 
     128: ( 1, 0, 0)
    -128: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 1, 0, 0)]

reflux: div_stencils[1] = 
Coeficients and Shifts: { 
     128: ( 0, 1, 0)
    -128: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 0, 1, 0)]

reflux: div_stencils[2] = 
Coeficients and Shifts: { 
     128: ( 0, 0, 1)
    -128: ( 0, 0, 0)
}
srcRefratio:	( 1, 1, 1)
destRefratio:	( 1, 1, 1)
destShift:	( 0, 0, 0)
span:		[( 0, 0, 0),( 0, 0, 1)]

reflux: After stage 1 (coarse flux only): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
 max_z = 4.586, min_z = 4.586
reflux: After stage 2 (composite coar/cofi): 
 max_x = 4.586, min_x = 4.586
 max_y = 4.586, min_y = 4.586
 max_z = 4.586, min_z = 4.586
reflux stage 3: reflux divergence and increment: 
 reflux: Buffers should hold composite coar/cofi flux: 
 buff_x.max() = 4.586, buff_x.min() = 4.586
 buff_y.max() = 4.586, buff_y.min() = 4.586
 buff_z.max() = 4.586, buff_z.min() = 4.586
 flux_x.max() = 4.586, flux_x.min() = 4.586
 flux_y.max() = 4.586, flux_y.min() = 4.586
 flux_z.max() = 4.586, flux_z.min() = 4.586
 reflux: Buffers should hold Fdiff = Fcomposite - Fcoar (zero where they match): 
 buff_x.max() = 2.22507e-308, buff_x.min() = 0
 buff_y.max() = 2.22507e-308, buff_y.min() = 0
 buff_z.max() = 2.22507e-308, buff_z.min() = 0
reflux going into component loop: 
 valid =   [( 0, 0, 0),( 7, 7, 7)]
 reflux: big incr bit: 
 div_incr_x.max() = 2.22507e-308 div_incr_x.min() = 0
 div_incr_y.max() = 2.22507e-308 div_incr_y.min() = 0
 div_incr_z.max() = 2.22507e-308 div_incr_z.min() = 0
 divergence.max() = 2.22507e-308 divergence.min() = 0
solveForPhi: testFluxRegister passed
AMRMultiGrid::solveNoInitResid: initial residual norm = 1.10286e+06
    AMRMultiGrid:: iteration = 0, residual norm = 1.102857e+06
    AMRMultiGrid:: iteration = 1, residual norm = 5.755065e+05, rate = 1.916325e+00
    AMRMultiGrid:: iteration = 2, residual norm = 2.610007e+05, rate = 2.205000e+00
    AMRMultiGrid:: iteration = 3, residual norm = 1.189985e+05, rate = 2.193310e+00
    AMRMultiGrid:: iteration = 4, residual norm = 5.342484e+04, rate = 2.227400e+00
    AMRMultiGrid:: iteration = 5, residual norm = 2.374493e+04, rate = 2.249948e+00
    AMRMultiGrid:: iteration = 6, residual norm = 1.045886e+04, rate = 2.270316e+00
    AMRMultiGrid:: iteration = 7, residual norm = 4.573042e+03, rate = 2.287069e+00
    AMRMultiGrid:: iteration = 8, residual norm = 1.987056e+03, rate = 2.301416e+00
    AMRMultiGrid:: iteration = 9, residual norm = 8.589156e+02, rate = 2.313447e+00
    AMRMultiGrid:: iteration = 10, residual norm = 3.696291e+02, rate = 2.323723e+00
    AMRMultiGrid:: iteration = 11, residual norm = 1.584710e+02, rate = 2.332471e+00
    AMRMultiGrid:: iteration = 12, residual norm = 6.772297e+01, rate = 2.339989e+00
    AMRMultiGrid:: iteration = 13, residual norm = 2.886165e+01, rate = 2.346470e+00
    AMRMultiGrid:: iteration = 14, residual norm = 1.227064e+01, rate = 2.352089e+00
    AMRMultiGrid:: iteration = 15, residual norm = 5.206084e+00, rate = 2.356982e+00
    AMRMultiGrid:: iteration = 16, residual norm = 2.204790e+00, rate = 2.361261e+00
    AMRMultiGrid:: iteration = 17, residual norm = 9.322508e-01, rate = 2.365018e+00
    AMRMultiGrid:: iteration = 18, residual norm = 3.936324e-01, rate = 2.368328e+00
    AMRMultiGrid:: iteration = 19, residual norm = 1.660018e-01, rate = 2.371254e+00
    AMRMultiGrid:: iteration = 20, residual norm = 6.992939e-02, rate = 2.373848e+00
    AMRMultiGrid:: iteration = 21, residual norm = 2.942965e-02, rate = 2.376154e+00
    AMRMultiGrid:: iteration = 22, residual norm = 1.237472e-02, rate = 2.378208e+00
    AMRMultiGrid:: iteration = 23, residual norm = 5.199372e-03, rate = 2.380041e+00
    AMRMultiGrid:: iteration = 24, residual norm = 2.183069e-03, rate = 2.381681e+00
    AMRMultiGrid:: iteration = 25, residual norm = 9.160434e-04, rate = 2.383150e+00
    AMRMultiGrid:: iteration = 26, residual norm = 3.841711e-04, rate = 2.384467e+00
    AMRMultiGrid:: iteration = 27, residual norm = 1.610340e-04, rate = 2.385651e+00
    AMRMultiGrid:: iteration = 28, residual norm = 6.747097e-05, rate = 2.386716e+00
    AMRMultiGrid:: iteration = 29, residual norm = 2.825803e-05, rate = 2.387675e+00
    AMRMultiGrid:: iteration = 30, residual norm = 1.183068e-05, rate = 2.388539e+00
    AMRMultiGrid:: iteration = 31, residual norm = 4.951487e-06, rate = 2.389317e+00
    AMRMultiGrid:: iteration = 32, residual norm = 2.071738e-06, rate = 2.390016e+00
    AMRMultiGrid:: iteration = 33, residual norm = 8.665997e-07, rate = 2.390652e+00
    AMRMultiGrid:: iteration = 33, residual norm = 8.665997e-07
    AMRMultiGrid::solveNoInitResid: final residual norm = 8.665997e-07
WriteAMRHierarchy:  about to hopen handle for file phi.hdf5
WriteAMRHierarchy:  finished opening file phi.hdf5
peak memory usage: 16994493 bytes (16 Mb)
